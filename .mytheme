# Inspired by the M365 Princess theme usually available on Oh-My-ZSH
# Enable command substitution in prompt
setopt PROMPT_SUBST

# Color definitions
# Check terminal color support
if [[ "$COLORTERM" == "truecolor" ]] || [[ "$TERM" == *"24bit"* ]]; then
    # True color (24-bit) support
    COLOUR_WHITE='#FFFFFF'
    COLOR_ONE='#D52D00'
    COLOR_TWO='#EF7627'
    COLOR_THREE='#FF9A56'
    COLOR_FOUR='#D162A4'
    COLOR_FIVE='#B55690'
    COLOR_SIX="#A30262"
else
    # Fallback to 256 colors
    COLOUR_WHITE='255'      # #FFFFFF
    COLOR_ONE='160' # #D52D00 -> Red
    COLOR_TWO='208'  # #EF7627 -> Dark Orange
    COLOR_THREE='215'  # #FF9A56 -> Light Orange
    COLOR_FOUR='169'   # #D162A4 -> Medium Pink
    COLOR_FIVE='132' # #B55690 -> Medium Purple
    COLOR_SIX='125' # #A30262 -> Deep Pink
fi

# Define special characters with proper escaping
POWERLINE_SYMBOL=$'\ue0b0'
HEART_SYMBOL=$'\u2764'
ARROW_SYMBOL=$'\u279c'
STASH_SYMBOL=$'\ueb4b'
NODE_SYMBOL=$'\ue718'
LEADING_ROUNDED=$'\ue0b6'
ENDING_ROUNDED=$'\ue0b4'
FOLDER_SYMBOL=$'\uF115'
GIT_SYMBOL=$'\ue725'

# Git segment function
git_info() {
    local ref
    ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
    echo " ${ARROW_SYMBOL} (${ref#refs/heads/}$(git_stash_count)) ${GIT_SYMBOL}"
}

git_stash_count() {
    local stash_count
    stash_count=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
    [[ "$stash_count" -gt 0 ]] && echo " ${STASH_SYMBOL} ${stash_count}"
}

# Node segment function
node_info() {
    # First check if node exists
    if ! command -v node &> /dev/null; then
        echo "node not available"
    fi
    
    # Then check for git repo or package.json
    if git rev-parse --is-inside-work-tree &> /dev/null || [ -f "package.json" ]; then
        echo "${NODE_SYMBOL} $(node -v)"
    else
        echo "local ${FOLDER_SYMBOL}"
    fi
}

# Time segment function
time_info() {
    echo " ${HEART_SYMBOL} $(date '+%H:%M') "
}

path_info() {
    echo " ${FOLDER_SYMBOL} %~ "
}

# Add new function to check if in git repo
is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}

# Conditional git segment
git_segment() {
    if is_git_repo; then
        echo "%{%K{${COLOR_THREE}}%F{${COLOR_TWO}}%}${POWERLINE_SYMBOL}%{%F{${COLOUR_WHITE}}%}$(git_info) %{%K{${COLOR_FOUR}}%F{${COLOR_THREE}}%}"
    else
        echo "%{%K{${COLOR_FOUR}}%F{${COLOR_TWO}}%}"
    fi
}

# Update prompt definitions
PROMPT='%{%k%F{${COLOR_ONE}}%}${LEADING_ROUNDED}%{%K{${COLOR_ONE}}%F{${COLOUR_WHITE}}%}%n %{%K{${COLOR_TWO}}%F{${COLOR_ONE}}%}${POWERLINE_SYMBOL}'
PROMPT+='%{%K{${COLOR_TWO}}%F{${COLOUR_WHITE}}%} %~ '
PROMPT+='$(git_segment)${POWERLINE_SYMBOL}'
PROMPT+='%{%K{${COLOR_FOUR}}%F{${COLOUR_WHITE}}%} $(node_info) %{%K{${COLOR_FIVE}}%F{${COLOR_FOUR}}%}${POWERLINE_SYMBOL}'
PROMPT+='%{%K{${COLOR_FIVE}}%F{${COLOUR_WHITE}}%}$(time_info)%{%k%F{${COLOR_FIVE}}%}${ENDING_ROUNDED}% '
PROMPT+=$'\n %{%{%k%F{${COLOR_ONE}}%}└➤ %{%f%}'